# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Product(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, product_id: str=None, description: str=None, display_name: str=None, capacity: str=None, image: str=None):
        """
        Product - a model defined in Swagger

        :param product_id: The product_id of this Product.
        :type product_id: str
        :param description: The description of this Product.
        :type description: str
        :param display_name: The display_name of this Product.
        :type display_name: str
        :param capacity: The capacity of this Product.
        :type capacity: str
        :param image: The image of this Product.
        :type image: str
        """
        self.swagger_types = {
            'product_id': str,
            'description': str,
            'display_name': str,
            'capacity': str,
            'image': str
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'description': 'description',
            'display_name': 'display_name',
            'capacity': 'capacity',
            'image': 'image'
        }

        self._product_id = product_id
        self._description = description
        self._display_name = display_name
        self._capacity = capacity
        self._image = image

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.
        :rtype: Product
        """
        return deserialize_model(dikt, cls)

    @property
    def product_id(self) -> str:
        """
        Gets the product_id of this Product.
        Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.

        :return: The product_id of this Product.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: str):
        """
        Sets the product_id of this Product.
        Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.

        :param product_id: The product_id of this Product.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def description(self) -> str:
        """
        Gets the description of this Product.
        Description of product.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Product.
        Description of product.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self) -> str:
        """
        Gets the display_name of this Product.
        Display name of product.

        :return: The display_name of this Product.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """
        Sets the display_name of this Product.
        Display name of product.

        :param display_name: The display_name of this Product.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def capacity(self) -> str:
        """
        Gets the capacity of this Product.
        Capacity of product. For example, 4 people.

        :return: The capacity of this Product.
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: str):
        """
        Sets the capacity of this Product.
        Capacity of product. For example, 4 people.

        :param capacity: The capacity of this Product.
        :type capacity: str
        """

        self._capacity = capacity

    @property
    def image(self) -> str:
        """
        Gets the image of this Product.
        Image URL representing the product.

        :return: The image of this Product.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """
        Sets the image of this Product.
        Image URL representing the product.

        :param image: The image of this Product.
        :type image: str
        """

        self._image = image

