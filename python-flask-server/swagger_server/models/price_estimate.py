# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PriceEstimate(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, product_id: str=None, currency_code: str=None, display_name: str=None, estimate: str=None, low_estimate: float=None, high_estimate: float=None, surge_multiplier: float=None):
        """
        PriceEstimate - a model defined in Swagger

        :param product_id: The product_id of this PriceEstimate.
        :type product_id: str
        :param currency_code: The currency_code of this PriceEstimate.
        :type currency_code: str
        :param display_name: The display_name of this PriceEstimate.
        :type display_name: str
        :param estimate: The estimate of this PriceEstimate.
        :type estimate: str
        :param low_estimate: The low_estimate of this PriceEstimate.
        :type low_estimate: float
        :param high_estimate: The high_estimate of this PriceEstimate.
        :type high_estimate: float
        :param surge_multiplier: The surge_multiplier of this PriceEstimate.
        :type surge_multiplier: float
        """
        self.swagger_types = {
            'product_id': str,
            'currency_code': str,
            'display_name': str,
            'estimate': str,
            'low_estimate': float,
            'high_estimate': float,
            'surge_multiplier': float
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'currency_code': 'currency_code',
            'display_name': 'display_name',
            'estimate': 'estimate',
            'low_estimate': 'low_estimate',
            'high_estimate': 'high_estimate',
            'surge_multiplier': 'surge_multiplier'
        }

        self._product_id = product_id
        self._currency_code = currency_code
        self._display_name = display_name
        self._estimate = estimate
        self._low_estimate = low_estimate
        self._high_estimate = high_estimate
        self._surge_multiplier = surge_multiplier

    @classmethod
    def from_dict(cls, dikt) -> 'PriceEstimate':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PriceEstimate of this PriceEstimate.
        :rtype: PriceEstimate
        """
        return deserialize_model(dikt, cls)

    @property
    def product_id(self) -> str:
        """
        Gets the product_id of this PriceEstimate.
        Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles

        :return: The product_id of this PriceEstimate.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: str):
        """
        Sets the product_id of this PriceEstimate.
        Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles

        :param product_id: The product_id of this PriceEstimate.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def currency_code(self) -> str:
        """
        Gets the currency_code of this PriceEstimate.
        [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.

        :return: The currency_code of this PriceEstimate.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """
        Sets the currency_code of this PriceEstimate.
        [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.

        :param currency_code: The currency_code of this PriceEstimate.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def display_name(self) -> str:
        """
        Gets the display_name of this PriceEstimate.
        Display name of product.

        :return: The display_name of this PriceEstimate.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """
        Sets the display_name of this PriceEstimate.
        Display name of product.

        :param display_name: The display_name of this PriceEstimate.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def estimate(self) -> str:
        """
        Gets the estimate of this PriceEstimate.
        Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.

        :return: The estimate of this PriceEstimate.
        :rtype: str
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate: str):
        """
        Sets the estimate of this PriceEstimate.
        Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.

        :param estimate: The estimate of this PriceEstimate.
        :type estimate: str
        """

        self._estimate = estimate

    @property
    def low_estimate(self) -> float:
        """
        Gets the low_estimate of this PriceEstimate.
        Lower bound of the estimated price.

        :return: The low_estimate of this PriceEstimate.
        :rtype: float
        """
        return self._low_estimate

    @low_estimate.setter
    def low_estimate(self, low_estimate: float):
        """
        Sets the low_estimate of this PriceEstimate.
        Lower bound of the estimated price.

        :param low_estimate: The low_estimate of this PriceEstimate.
        :type low_estimate: float
        """

        self._low_estimate = low_estimate

    @property
    def high_estimate(self) -> float:
        """
        Gets the high_estimate of this PriceEstimate.
        Upper bound of the estimated price.

        :return: The high_estimate of this PriceEstimate.
        :rtype: float
        """
        return self._high_estimate

    @high_estimate.setter
    def high_estimate(self, high_estimate: float):
        """
        Sets the high_estimate of this PriceEstimate.
        Upper bound of the estimated price.

        :param high_estimate: The high_estimate of this PriceEstimate.
        :type high_estimate: float
        """

        self._high_estimate = high_estimate

    @property
    def surge_multiplier(self) -> float:
        """
        Gets the surge_multiplier of this PriceEstimate.
        Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.

        :return: The surge_multiplier of this PriceEstimate.
        :rtype: float
        """
        return self._surge_multiplier

    @surge_multiplier.setter
    def surge_multiplier(self, surge_multiplier: float):
        """
        Sets the surge_multiplier of this PriceEstimate.
        Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.

        :param surge_multiplier: The surge_multiplier of this PriceEstimate.
        :type surge_multiplier: float
        """

        self._surge_multiplier = surge_multiplier

