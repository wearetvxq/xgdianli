# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.activity import Activity
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Activities(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, offset: int=None, limit: int=None, count: int=None, history: List[Activity]=None):
        """
        Activities - a model defined in Swagger

        :param offset: The offset of this Activities.
        :type offset: int
        :param limit: The limit of this Activities.
        :type limit: int
        :param count: The count of this Activities.
        :type count: int
        :param history: The history of this Activities.
        :type history: List[Activity]
        """
        self.swagger_types = {
            'offset': int,
            'limit': int,
            'count': int,
            'history': List[Activity]
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'count': 'count',
            'history': 'history'
        }

        self._offset = offset
        self._limit = limit
        self._count = count
        self._history = history

    @classmethod
    def from_dict(cls, dikt) -> 'Activities':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Activities of this Activities.
        :rtype: Activities
        """
        return deserialize_model(dikt, cls)

    @property
    def offset(self) -> int:
        """
        Gets the offset of this Activities.
        Position in pagination.

        :return: The offset of this Activities.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """
        Sets the offset of this Activities.
        Position in pagination.

        :param offset: The offset of this Activities.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self) -> int:
        """
        Gets the limit of this Activities.
        Number of items to retrieve (100 max).

        :return: The limit of this Activities.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """
        Sets the limit of this Activities.
        Number of items to retrieve (100 max).

        :param limit: The limit of this Activities.
        :type limit: int
        """

        self._limit = limit

    @property
    def count(self) -> int:
        """
        Gets the count of this Activities.
        Total number of items available.

        :return: The count of this Activities.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """
        Sets the count of this Activities.
        Total number of items available.

        :param count: The count of this Activities.
        :type count: int
        """

        self._count = count

    @property
    def history(self) -> List[Activity]:
        """
        Gets the history of this Activities.

        :return: The history of this Activities.
        :rtype: List[Activity]
        """
        return self._history

    @history.setter
    def history(self, history: List[Activity]):
        """
        Sets the history of this Activities.

        :param history: The history of this Activities.
        :type history: List[Activity]
        """

        self._history = history

